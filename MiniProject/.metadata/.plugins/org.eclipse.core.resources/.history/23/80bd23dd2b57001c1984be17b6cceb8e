import javax.swing.JLabel;
import javax.swing.JTextField;

public class GameThread extends Thread {
	private GamePanel gamePanel = null;
	private GameGroundPanel groundPanel = null;
	private Thread textTh[] = null;
	
	private int end = 2;
	private int maxTextCount = 4; // 화면에 표시할 수 있는 최대 카운트
	private int textChange[] = new int [10];
	private int delayFirst = 2; // 새로운 단어가 빠르면 delayFirst초 만에 나온다
	
	private int runNumber = 0; 
	
	public GameThread(GamePanel gamePanel,GameGroundPanel groundPanel,Thread[] textTh) {
		this.gamePanel = gamePanel;
		this.groundPanel = groundPanel;
		this.textTh = textTh;
	}

	public void setTextSpeed(double n) {
		SetSpeedThread setSpeedTh = new SetSpeedThread(5000, textTh, n);
		setSpeedTh.start(); // 스레드 시작
	}
	public void allEnd() {
		gamePanel.textMoveThreadEnd();
		gamePanel.itemThreadEnd();
		gamePanel.diamondThreadEnd();
	}
	public void setEnd(int i) { end = i; }
	@Override
	public void run() {
		if(runNumber == 0) {
			gamePanel.startGamePanel();
			runNumber++;
			JTextField j = gamePanel.getInput();
			j.requestFocus(); // j에 focus 두기
		}
		while(true) {
			int i=0;
			for(i=0;i<maxTextCount;i++) {
				if(gamePanel.getTextChange(i) == 0) // text[] 중 사용하지 않는 text 찾기
					break;
			}
			if(i<maxTextCount)
				gamePanel.textMake(i); // text 만들기
			
			int delay = (int)(Math.random()*1)+delayFirst; // delayFirst~delayFirst+4초 사이 중 랜덤하게 선택
			delay *= 1000; //(1000ms = 1초)
			try {
				Thread.sleep(delay);
			} catch (InterruptedException e) {
				allEnd();
				gamePanel.gameEndPanel(end);
				return; // run()의 리턴은 스레드 종료
			} 
		}
	}
	class SetSpeedThread extends Thread {
		private int timer = 0;
		private Thread textTh[] = null;
		private double n; // 속도 n배
		public SetSpeedThread(int timer, Thread textTh[], double n) {
			this.timer = timer;
			this.textTh = textTh;
			this.n = n;
		}
		public void run() {
			int i=0;
			for(i=0;i<maxTextCount;i++) // 현재 실행 중인 textTh 중지
				if(gamePanel.getTextChange(i) != 0) 
					((TextMoveThread) textTh[i]).textSpped(n); // 현재 존재하는 text 스레드 속도 변화(n배)
			try {
				Thread.sleep(timer); // timer작동 (아이템 작동하는 timer)
				this.interrupt(); 
				Thread.sleep(1000); // 위에 interrupt를 실행시키기 위해 만들어 놓은 것 
			} catch (InterruptedException e) {
				n /= 2; // 1/2배를 해서 textSpped를 원래 상태로 돌려 놓기
				for(i=0;i<maxTextCount;i++) // 현재 실행 중인 textTh
					if(gamePanel.getTextChange(i) != 0) 
						((TextMoveThread) textTh[i]).textSpped(n); // 현재 존재하는 text 스레드 속도 변화(n배)
				return;
			}
		}
	}
}
